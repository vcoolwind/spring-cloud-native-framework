server.port=8102
ratings.enabled=true
ratings.servicename=ratings
configReload.enabled=true
configReload.servicename=configreload
feign.hystrix.enabled=true
logging.level.web=info

spring.application.name=reviews

#nacos certification information
spring.cloud.nacos.username=nacos
spring.cloud.nacos.password=nacos

#---------------------nacos config start------------------------------------------#
### 通过nacos控制台添加namespace为bookinfo，并添加dataId和group ###
#nacos配置中心地址
spring.cloud.nacos.config.server-addr=${NACOS_SERVER:192.168.92.3:31848}
#nacos的命名空间，用来标记应用组，可以互相发现的一组微服务。对应nacos控制台的namespace  id。
spring.cloud.nacos.config.namespace=${NACOS_NAMESPACE:bookinfo}
# 分组，用来标记运行环境 dev prd等等
spring.cloud.nacos.config.group=${NACOS_GROUP:dev}
#dataId 的完整格式如下：${prefix}-${spring.profile.active}.${file-extension}
#    prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。
#    spring.profile.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。
#    注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}
#    file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。
#应用文件格式支持properties,yml两种，默认是properties
#spring.cloud.nacos.config.file-extension=properties
spring.cloud.nacos.discovery.server-addr=${NACOS_SERVER:192.168.92.3:31848}
spring.cloud.nacos.discovery.namespace=${NACOS_NAMESPACE:bookinfo}
spring.cloud.nacos.discovery.group=${NACOS_GROUP:dev}
#---------------------nacos config end------------------------------------------#

spring.datasource.platform=${DATASOURCE_PLATFORM:pg}
spring.datasource.url=${DATASOURCE_URL:jdbc:postgresql://192.168.92.1:5432/reviewdb}
spring.datasource.username=${DATASOURCE_USERNAME:bookinfo}
spring.datasource.password=${DATASOURCE_PASSWORD:bookinfo}
spring.datasource.driver-class-name=${DATASOURCE_DRIVER:org.postgresql.Driver}

spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.current_session_context_class=thread
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:none}

spring.http.log-request-details=false

#management.security.enabled=false
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.endpoint.env.enabled=true
management.endpoint.info.enabled=true
management.endpoint.mappings.enabled=true
management.endpoint.loggers.enabled=true
management.endpoints.web.exposure.include[0]=health
management.endpoints.web.exposure.include[1]=info
management.endpoints.web.exposure.include[2]=mappings
management.endpoints.web.exposure.include[3]=metrics
management.endpoints.web.exposure.include[4]=env
management.endpoints.web.exposure.include[5]=healthz
management.endpoints.web.exposure.include[6]=prometheus
management.endpoints.web.exposure.include[7]=loggers
management.endpoints.web.base-path=/actuator
management.endpoints.enabled-by-default=false